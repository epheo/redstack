---

- name: Install packages
  package:
    state: latest
    name: python3-virtualbmc

- name: Create etc directory
  file:
    path: /etc/virtualbmc/
    state: directory

- name: Create conf file
  copy:
    src: ../files/virtualbmc.conf
    dest: /etc/virtualbmc/

- name: Create log file
  shell: touch /var/log/virtualbmc.log

# - name: Disable SSH StrictHostKeyChecking
#   copy:
#     dest: "~/.ssh/config"
#     content: |
#       Host *
#         StrictHostKeyChecking no

- name: Configure vbmc ports
  shell: |
    if [ -z "$(vbmc list |grep \ {{ item.name }}\ )" ]; then
      vbmc add {{ item.name  }} --port {{ item.port }} --username {{ bmc_username }} --password {{ bmc_password }} --address {{ vbmc.ip }} --libvirt-uri qemu:///system
    fi
  loop: "{{ vbmc.ports }}"
  register: command_result
  changed_when: "command_result.stdout != ''"

- name: Create vbmc-ports.service
  copy:
    dest: "/etc/systemd/system/vbmc-ports.service"
    content: |
      [Unit]
      Description=Manage pre-configured vbmc ports
      After=network.target
      [Service]
      Type=forking
      ExecStart=/usr/local/sbin/vbmc-ports.sh
      TimeoutStartSec=0
      [Install]
      WantedBy=default.target

- name: Create file vbmc-ports.sh
  shell: |
    echo '#!/bin/bash' > /usr/local/sbin/vbmc-ports.sh
    chmod +x /usr/local/sbin/vbmc-ports.sh

- name: Configure vbmc-ports.sh content
  shell: "echo 'vbmc start {{ item.name  }}' >> /usr/local/sbin/vbmc-ports.sh"
  loop: "{{ vbmc.ports }}"

- name: Open firewalld vbmc ports
  shell: "firewall-cmd  --permanent --zone=libvirt --add-port={{ item.port }}/udp"
  loop: "{{ vbmc.ports }}"

- name: Enable forwarding
  shell: "firewall-cmd --permanent --direct --add-rule ipv4 filter FORWARD 1 -s 0.0.0.0/0 -j ACCEPT"

- name: Reload firewalld
  shell: "firewall-cmd --reload"

# - name: Open IPTABLES vbmc ports
#   shell: "iptables -I INPUT -p udp --dport {{ item.port }} -m state --state NEW  -j ACCEPT"
#   loop: "{{ vbmc.ports }}"
#   when: ansible_distribution == 'CentOS' or ansible_distribution == 'Red Hat Enterprise Linux'
# 
# - name: Enable forwarding
#   shell: "iptables -I FORWARD 1  -d 0.0.0.0/0 -j ACCEPT"
# 
# - name: Save IPTABLES
#   shell: "iptables-save |sudo tee /etc/sysconfig/iptables"
#   when: ansible_distribution == 'CentOS' or ansible_distribution == 'Red Hat Enterprise Linux'

- name: Enable vbmc-ports service 
  become: yes
  systemd:
    daemon_reload: yes
    enabled: yes
    name: vbmc-ports

- name: Restart vbmc-ports service 
  ignore_errors: yes # https://github.com/ansible/ansible/issues/71528
  become: yes
  systemd:
    state: restarted
    daemon_reload: yes
    name: vbmc-ports
